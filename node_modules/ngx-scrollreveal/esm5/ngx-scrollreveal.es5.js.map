{"version":3,"file":"ngx-scrollreveal.es5.js","sources":["../../tmp/services/ngs-reveal-config.ts","../../tmp/services/window.service.ts","../../tmp/services/ngs-reveal.service.ts","../../tmp/directives/ngs-reveal-common.directive.ts","../../tmp/directives/ngs-reveal.directive.ts","../../tmp/directives/ngs-reveal-set.directive.ts","../../tmp/ngs-reveal.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n/**\n * Configuration service for the NgsScrollReveal directives.\n * You can inject this service, typically in your root component, and customize the values of its properties in\n * order to provide default values for all the ngsReveal directives used in the application.\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NgsRevealConfig {\n\n    ///////////////////////\n    // Animation options //\n    ///////////////////////\n\n    /**\n     * `options.delay` is the time before reveal animations begin.\n     * By default, delay will be used for all reveal animations,\n     * but `options.useDelay` can be used to change when delay is applied.\n     * However, animations triggered by `options.reset` will never use delay.\n     */\n    delay?= 0;\n    /**\n     * `options.distance` controls how far elements move when revealed.\n     */\n    distance?= '0px';\n    /**\n     * `options.duration` controls how long animations take to complete.\n     */\n    duration?= 600;\n    /**\n     * `options.easing` controls how animations transition between their start and end values.\n     * Accepts any valid CSS easing, e.g. 'ease', 'ease-in-out', 'linear', etc.\n     */\n    easing?= 'cubic-bezier(0.5, 0, 0, 1)';\n    /**\n     * `options.interval` is the time between each reveal.\n     */\n    interval?= 0;\n    /**\n     * `options.opacity` specifies the opacity they have prior to being revealed.<br/>\n     */\n    opacity?= 0;\n    /**\n     * `options.origin` specifies what direction elements come from when revealed.\n     */\n    origin?: 'bottom' | 'left' | 'top' | 'right' = 'bottom';\n    /**\n     * `options.rotate` specifies the rotation elements have prior to being revealed.\n     */\n    rotate?= { x: 0, y: 0, z: 0 };\n    /**\n     * `options.scale` specifies the size of elements have prior to being revealed.\n     */\n    scale?= 0.9;\n\n    ////////////////////\n    // Config options //\n    ////////////////////\n\n    /**\n     * When non-resetting reveal animations complete, `ScrollReveal` will remove that elements event listeners,\n     * generated styles and metadata. In some cases (such as asynchronous sequences), you may not want this behavior.\n     */\n    cleanup?= false;\n    /**\n     * `options.container` is used as the viewport, when determining element visibility.\n     * This is the element that ScrollReveal binds event listeners to.\n     */\n    container?: Element | string;\n    /**\n     * `options.desktop` enables/disables animations on desktop browsers.\n     */\n    desktop?= true;\n    /**\n     * `options.mobile` enables/disables animations on mobile browsers.\n     */\n    mobile?= true;\n    /**\n     * `options.reset` enables/disables elements returning to their initialized position when they leave the viewport.\n     * When true elements reveal each time they enter the viewport instead of once.\n     */\n    reset?= false;\n    /**\n     * `options.useDelay` specifies when values assigned to options.delay are used.\n     *\n     * - 'always' — delay for all reveal animations\n     * - 'once'   — delay only the first time reveals occur\n     * - 'onload' - delay only for animations triggered by first load\n     */\n    useDelay?: 'always' | 'once' | 'onload' = 'always';\n    /**\n     * `options.viewFactor` specifies what portion of an element must be within the viewport for it to be considered visible.\n     */\n    viewFactor?= 0.2;\n    /**\n     * `options.viewOffset` expands/contracts the active boundaries of the viewport when calculating element visibility.\n     *\n     * Visual Aid: https://scrollrevealjs.org/assets/viewoffset.png\n     */\n    viewOffset?= { top: 0, right: 0, bottom: 0, left: 0 };\n\n    //////////////////////\n    // Callback options //\n    //////////////////////\n\n    /**\n     * `options.beforeReveal` is a function that fires when a reveal is triggered.\n     */\n    beforeReveal?: (el: HTMLElement) => void;\n    /**\n     * `options.afterReveal` is a function that fires upon reveal completion.\n     */\n    afterReveal?: (el: HTMLElement) => void;\n    /**\n     * `options.beforeReset` is a function that fires when a reset is triggered.\n     */\n    beforeReset?: (el: HTMLElement) => void;\n    /**\n     * `options.afterReset` is a function that fires upon reset completion.Callback to call after an element is reset.\n     */\n    afterReset?: (el: HTMLElement) => void;\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Service to interact with the window object.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class WindowService {\n\n  get nativeWindow(): any {\n    return _window();\n  }\n}\n\nfunction _window(): any {\n  // Return the global native browser window object\n  return typeof window !== 'undefined' ? window : undefined;\n}\n","import { Injectable, ElementRef } from '@angular/core';\nimport { NgsRevealConfig } from './ngs-reveal-config';\nimport { WindowService } from './window.service';\nimport { Subject, Observable } from 'rxjs';\n\n/**\n * Type that represents the target that can be passed to `ScrollReveal().reveal()`.\n */\nexport type NgsRevealTarget = string | HTMLElement | HTMLCollection | Array<any>;\n\n/**\n * Basic interface to represent `ScrollReveal` object.\n */\nexport interface NgsScrollReveal {\n  /**\n   * Controls whether or not to output help messages to the console when unexpected things occur at runtime.\n   */\n  debug?: boolean;\n  /**\n   * When `ScrollReveal` is instantiated on unsupported or disabled browsers,\n   * a non-operational instance is created with a `noop` property that returns `true`\n   */\n  noop: boolean;\n  /**\n   * Returns the version of `ScrollReveal` currently loaded on the page.\n   */\n  version?: string;\n  /**\n   * When non-resetting reveal animations complete, `ScrollReveal` will remove that elements event listeners, generated styles and metadata.\n   * In some cases (such as asynchronous sequences), you may not want this behavior.\n   * @param target the related element\n   */\n  clean(target: NgsRevealTarget): void;\n  /**\n   * Reverses the effects of all `reveal()` calls, removing all generated styles and event listeners, and clears the `ScrollReveal` store.\n   */\n  destroy(): void;\n  /**\n   * Invokes all previous `reveal()` calls (with the appropriate arguments), to capture any new elements added to the DOM.\n   */\n  sync(): void;\n  /**\n   * Registers the target element(s) with ScrollReveal, generates animation styles,\n   * and attaches event listeners to manage when styles are applied.\n   * @param target element to reveal\n   * @param options optionbs to use to reveal\n   * @param syncing whether or not to sync newly added elements (through an asyn call for e.g) with DOM\n   */\n  reveal(target: NgsRevealTarget, options?: NgsRevealConfig, syncing?: boolean): void;\n\n  isSupported(): boolean;\n}\n\n/**\n * The function that returns the `ScrollReveal` instance.\n * @param options Options to use instead of the defaults.\n */\ndeclare function ScrollReveal(options?: NgsRevealConfig): NgsScrollReveal;\n\n/**\n * Marker interface to indicate that an object (typically `window`) has `scrollreveal` property.\n */\nexport interface NgsHasScrollReveal {\n  scrollReveal: NgsScrollReveal;\n}\n\n/**\n * Service to inject in directives to use ScrollReveal JS.\n * It delegates the work to SR, when DOM manipulation is possible (i.e app is not running in a web worker for e.g).\n * If not possible, most methods simply do nothing, as DOM elements are not available anyway.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class NgsRevealService {\n\n  // the Magic Maker !\n  // this objet is added to window scope when linking the scrollreveal.js library\n  private sr: NgsScrollReveal;\n\n  // Window Object\n  private window: Window & NgsHasScrollReveal;\n  private config: NgsRevealConfig;\n\n\n   // Observable  sources\n  private beforeRevealSource: Subject<HTMLElement>;\n  private afterRevealSource: Subject<HTMLElement>;\n  private beforeResetSource: Subject<HTMLElement>;\n  private afterResetSource: Subject<HTMLElement>;\n\n   /**\n    * Observable to subscribe to and get notified before an element is revealed.\n    */\n   beforeReveal$: Observable<HTMLElement>;\n   /**\n    * Observable to subscribe to and get notified after an element is revealed.\n    */\n   afterReveal$: Observable<HTMLElement>;\n   /**\n    * Observable to subscribe to and get notified before an element is reset.\n    */\n   beforeReset$: Observable<HTMLElement>;\n   /**\n    * Observable to subscribe to and get notified after an element is reset.\n    */\n   afterReset$: Observable<HTMLElement>;\n\n  constructor(config: NgsRevealConfig, windowService: WindowService) {\n     // Observable  sources\n     this.beforeRevealSource = new Subject<HTMLElement>();\n     this.afterRevealSource = new Subject<HTMLElement>();\n     this.beforeResetSource = new Subject<HTMLElement>();\n     this.afterResetSource = new Subject<HTMLElement>();\n\n     // Observable  streams\n    this.beforeReveal$ = this.beforeRevealSource.asObservable();\n    this.afterReveal$ = this.afterRevealSource.asObservable();\n    this.beforeReset$ = this.beforeResetSource.asObservable();\n    this.afterReset$ = this.afterResetSource.asObservable();\n\n    this.window = windowService.nativeWindow;\n    this.init(config);\n  }\n\n  /**\n   * Initializes Cookie Consent with the provided configuration.\n   * @param config the configuration object\n   */\n  init(config: NgsRevealConfig): void {\n    if (this.window) {// universal support\n      this.config = config;\n\n      // Set callbacks hooks:\n      this.config.beforeReveal = (el: HTMLElement) => this.beforeRevealSource.next(el);\n      this.config.afterReveal = (el: HTMLElement) => this.afterRevealSource.next(el);\n      this.config.beforeReset = (el: HTMLElement) => this.beforeResetSource.next(el);\n      this.config.afterReset = (el: HTMLElement) => this.afterResetSource.next(el);\n\n      // init the scrollReveal library with injected config\n      this.sr = ScrollReveal(config);\n    }\n  }\n\n    /**\n   * Gets the current configuration  used by ScrollReveal.\n   */\n  getConfig(): NgsRevealConfig {\n    return this.config;\n  }\n\n  /**\n   * Method to reveal a single DOM element.\n   * @param elementRef  a reference to the element to reveal\n   * @param config      (optional) custom configuration to use when revealing this element\n   */\n  reveal(elementRef: ElementRef<HTMLElement>, config?: NgsRevealConfig): void {\n    if (this.window && elementRef.nativeElement) {\n      this.sr.reveal(elementRef.nativeElement, config);\n    }\n  }\n\n  /**\n   * Method to reveal a set of DOM elements.\n   * @param parentElementRef  the parent DOM element encaspulating the child elements to reveal\n   * @param selector          a list of CSS selectors (comma-separated) that identifies child elements to reveal\n   * @param interval          (optional) interval in milliseconds, to animate child elemnts sequentially\n   * @param config            (optional) custom configuration to use when revealing this set of elements\n   */\n  revealSet(parentElementRef: ElementRef<HTMLElement>, selector: string, interval?: number, config?: NgsRevealConfig): void {\n    if (this.window && parentElementRef.nativeElement) {\n      const options = { ...config, interval: interval};\n      this.sr.reveal(selector, options);\n    }\n  }\n\n  /**\n   * Method to synchronize and consider newly added child elements (for e.g when child elements were added asynchronously to parent DOM) .\n   */\n  sync(): void {\n    if (this.window) {// universal support\n      this.sr.sync();\n    }\n  }\n\n  /**\n   * Reverses the effects of all `reveal()` calls, removing all generated styles and event listeners, and clears the `ScrollReveal` store.\n   */\n  destroy(): void {\n    if (this.window) {\n      this.sr.destroy();\n    }\n  }\n\n}\n","import { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\n\n/**\n * Base directive class shared by the concrete ScrollReveal directives.\n */\nexport abstract class AbstractNgsRevealDirective {\n\n    config: NgsRevealConfig;\n\n    constructor(protected ngsRevealService: NgsRevealService) { }\n\n    protected _initConfig(value: string | NgsRevealConfig): void {\n        if (value && typeof value === 'string') {\n            this.config = JSON.parse(value);\n        } else if (value && typeof value === 'object') {\n            this.config = value;\n        }\n    }\n}\n","import { Directive, HostBinding, OnInit, ElementRef, Input } from '@angular/core';\nimport { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>single DOM element</b> in the page.\n */\n@Directive({\n    selector: '[ngsReveal]'\n})\nexport class NgsRevealDirective extends AbstractNgsRevealDirective implements OnInit {\n\n    @HostBinding('style.visibility')\n    visibility = 'hidden';\n\n    /**\n     * Custom configuration to use when revealing this element\n     */\n    @Input('ngsReveal')\n    set _config(value: string | NgsRevealConfig) {\n        this._initConfig(value);\n    }\n\n    constructor(private elementRef: ElementRef, ngsRevealService: NgsRevealService) {\n        super(ngsRevealService);\n    }\n\n    ngOnInit() {\n        this.ngsRevealService.reveal(this.elementRef, this.config);\n    }\n}\n","import { Directive, OnInit, OnChanges, SimpleChange, ElementRef, Input } from '@angular/core';\nimport { NgsRevealConfig } from '../services/ngs-reveal-config';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n\n\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>set of DOM elements</b> (identify via the `[ngsSelector]` attribute) in the page.\n * This directive is meant to be placed on the <b>parent node</b> that contains the child elements to reveal.\n * You can optionally add the `[ngsInterval]` attribute to reveal items sequentially, following the given interval(in milliseconds).\n * You can optionally add the `[ngsSync]` attribute to reveal new child elements that may have been added in the parent node asynchronously.\n *\n */\n@Directive({\n    selector: '[ngsRevealSet]'\n})\nexport class NgsRevealSetDirective extends AbstractNgsRevealDirective implements OnInit, OnChanges {\n\n    /**\n     * Custom configuration to use when revealing this set of elements\n     */\n    @Input('ngsRevealSet')\n    set _config(value: string | NgsRevealConfig) {\n        this._initConfig(value);\n    }\n\n    /**\n     * CSS selector to identify child elements to reveal\n     */\n    @Input()\n    ngsSelector: string;\n\n    /**\n     * Sequence interval (in milliseconds) to the reveal child elements sequentially\n     */\n    @Input()\n    ngsInterval: number;\n\n    /**\n     * Boolean indicating when the set should be synced, to reveal asynchronously added child elements\n     */\n    @Input()\n    ngsSync: boolean;\n\n    constructor(private elementRef: ElementRef, ngsRevealService: NgsRevealService) {\n        super(ngsRevealService);\n    }\n\n    ngOnInit() {\n        if (!this.ngsSelector && console) {\n            const item: string = this.elementRef.nativeElement ? this.elementRef.nativeElement.className : '';\n            console.error(`[ngx-scrollreveal] You must set \"[ngsSelector]\" attribute on item '${item}' when using \"ngsRevealSet\"`);\n            return;\n        }\n        this.ngsRevealService.revealSet(this.elementRef, this.ngsSelector, this.ngsInterval, this.config);\n    }\n\n    ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n\n        const ngsSyncProp = 'ngsSync';\n        if (ngsSyncProp in changes\n            && !changes[ngsSyncProp].isFirstChange()\n            && !changes[ngsSyncProp].currentValue()) {\n            this.ngsRevealService.sync();\n        }\n    }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { WindowService, NgsRevealService, NgsRevealConfig } from './services/index';\nimport { NgsRevealDirective, NgsRevealSetDirective } from './directives/index';\n\nexport { WindowService, NgsRevealService, NgsRevealConfig } from './services/index';\n\nexport { NgsRevealDirective, NgsRevealSetDirective } from './directives/index';\n\n/**\n * Main module of the library\n */\n@NgModule({\n  imports: [\n    CommonModule\n  ],\n  exports: [NgsRevealDirective, NgsRevealSetDirective],\n  declarations: [NgsRevealDirective, NgsRevealSetDirective]\n})\nexport class NgsRevealModule {\n}\n"],"names":["__extends"],"mappings":"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"}